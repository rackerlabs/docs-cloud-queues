<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">
        
        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
        
        <!-- changing authentication endpoints; define entities for US & UK rather than maintaining in text -->
        <!ENTITY ENDPOINT-US "https://identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-UK "https://lon.identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-US-20 "https://identity.api.rackspacecloud.com/v2.0/">
        <!ENTITY ENDPOINT-UK-20 "https://lon.identity.api.rackspacecloud.com/v2.0/">
        
        <!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                 <imageobject>
                  <imagedata fileref="img/Check_mark_23x20_02.svg"
                             format="SVG" scale="60"/>
                </imageobject>
              </inlinemediaobject>'>
              
        <!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                 <imageobject>
                  <imagedata fileref="img/Arrow_east.svg"
                             format="SVG" scale="60"/>
                </imageobject>
              </inlinemediaobject>'>
]>

<book xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:svg="http://www.w3.org/2000/svg"
  xmlns:m="http://www.w3.org/1998/Math/MathML"
  xmlns:html="http://www.w3.org/1999/xhtml"
  version="5.0-extension RaxBook-2.0" xml:id="cq-devguide">

  <?rax title.font.size="35px"
      pdf.url="../../cq-devguide.pdf" 
      status.bar.text.font.size="40px"
      canonical.url.base="http://docs.rackspace.com/queues/api/v1.0/cq-devguide/content"?>

  <title>Rackspace Cloud Queues Developer Guide</title>
  <info>
    <copyright>
      <year>2013</year>
      <year>2014</year>
      <holder>Rackspace US, Inc.</holder>
    </copyright>
    <releaseinfo>API v1</releaseinfo>
    <productname>Rackspace Cloud Queues</productname>
    <pubdate>2014-03-04</pubdate>
    <!--Note that the <productname> text matches the first few words of the title. The build system splits the title into productname + rest of title on the pdf cover.-->
    <!--If you leave the <pubdate> element empty, the build system inserts today's date automatically.   -->
    <legalnotice role="rs-api">
      <annotation>
        <remark>Copyright details are filled in by the build
          system.</remark>
      </annotation>
    </legalnotice>
    <abstract>
      <para>This document is intended for software developers
        interested in developing applications using the Rackspace
        Cloud Queues Application Programming Interface
          (<abbrev>API</abbrev>).</para>
    </abstract>

    <revhistory>
      <revision>
        <date>2014-03-04</date>
        <revdescription>
          <para>Updated <xref linkend="Pricing_SLA-d1e1362"/> to point
            to the pricing information for Cloud Queues because
            customers are now incurring fees for their usage of the
            Cloud Queues API and public outbound bandwidth.</para>
        </revdescription>
      </revision>
      <revision>
        <date>2014-01-28</date>
        <revdescription>
          <para>Updated <xref linkend="Pricing_SLA-d1e1362"/> to
            reflect the new time frame to begin billing for Cloud
            Queues.</para>
        </revdescription>
      </revision>
      <revision>
        <date>2014-01-22</date>
        <revdescription>
          <para>Updated the maximum size information for queue
            metadata and message body the Data Limits in <xref
              linkend="Absolute-Limits-d1e003"/>, as well as in the
            Set Queue Metadata and Post Message operations
            descriptions in <xref linkend="API_Operations_dle001"
            />.</para>
        </revdescription>
      </revision>
      <revision>
        <date>2013-12-19</date>
        <revdescription>
          <para>Updated the Post Message description in <xref
              linkend="API_Operations_dle001"/> to include the
            information that you must include even a single message in
            a JSON array or you will receive the error message
            "Invalid request body".</para>
        </revdescription>
      </revision>
      <revision>
        <date>2013-12-12</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Removed the <code>claim_id</code> parameter from
                the URI for the operation that gets a set of messages
                by ID.</para>
            </listitem>
            <listitem>
              <para>Updated the instructions for locating the API Key,
                Tenant ID, and account number in the Cloud Control
                Panel in <xref linkend="Retrieving_Auth_Token"
                />.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-11-04</date>
        <revdescription>
          <para>Initial Unlimited Availability (UA) release for
            Rackspace Cloud Queues</para>
        </revdescription>
      </revision>
      <revision>
        <date>2013-10-21</date>
        <revdescription>
          <para>Added the HKG service endpoint to <xref
              linkend="Endpoints-Table-d1e001"/>.</para>
        </revdescription>
      </revision>
      <revision>
        <date>2013-10-09</date>
        <revdescription>
          <para>Initial Limited Availability (LA) release for
            Rackspace Cloud Queues</para>
        </revdescription>
      </revision>
    </revhistory>

    <!-- 
       The values in raxm:metadata are used to control where the content appears on the landing page in docs.rackspace.com.
       Work with the Cloud Doc Tools team to find out what to put here. Once established, you should not change these
       values without first consulting with the CDT team.
    -->
    <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
      <raxm:displayname>API Developer Guide</raxm:displayname>
      <raxm:product version="v1.0">queues</raxm:product>
      <raxm:priority>20</raxm:priority>
    </raxm:metadata>
  </info>
  <chapter xml:id="overview">
    <title>Overview</title>
    <para>Rackspace Cloud Queues is an open source, scalable, and
      highly available message and notifications service. Cloud Queues
      supports a variety of messaging patterns. Users of this service
      can create and manage a producer-consumer or a
      publisher-subscriber model (<xref linkend="operating_modes"/>)
      from one simple API. Unlimited queues and messages give Cloud
      Queues users the flexibility they need to create powerful web
      applications in the cloud.</para>
    <para>Cloud Queues is based on the OpenStack Marconi
      project.</para>
    <para>Cloud Queues consists of a few basic components: queues,
      messages, claims, and statistics. In the producer-consumer
      model, users create queues in which producers, or servers, can
      post messages. Workers, or consumers, can then claim those
      messages and delete them after they complete the actions
      associated with the messages. A single claim can contain
      multiple messages, and administrators can query claims for
      status.</para>
    <para>In the publisher-subscriber model, messages are posted to a
      queue as in the producer-consumer model, but messages are never
      claimed. Instead, subscribers, or watchers, send
        <command>GET</command> requests to pull all messages that have
      been posted since their last request. In this model, a message
      remains in the queue, unclaimed, until the message's time to
      live (TTL) has expired.</para>
    <para>In both of these models, administrators can get queue
      statistics that display the most recent and oldest messages, the
      number of unclaimed messages, and more.</para>
    <remark security="reviewer">Reviewer: Do you want to add a diagram
      of Cloud Queues infrastructure / architecture if you can give it
      to me. For an example, see the DB diagram at <link
        xlink:href="http://docs.rackspace.com/cdb/api/v1.0/cdb-devguide/content/overview.html"
        >
        http://docs.rackspace.com/cdb/api/v1.0/cdb-devguide/content/overview.html</link>.</remark>

    <section xml:id="Intended_Audience-d1e166">
      <title>Intended Audience</title>
      <para>This document is intended for software developers who are
        interested in developing applications that use the Rackspace
        Cloud Queues API. It assumes that you have the following
        skills:</para>
      <itemizedlist>
        <listitem>
          <para>RESTful web services</para>
        </listitem>
        <listitem>
          <para>HTTP/1.1 conventions</para>
        </listitem>
        <listitem>
          <para>JSON data serialization formats</para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="Document_Change_History-d1e166">
      <title>Document Change History</title>
      <para>This version of the document replaces and obsoletes all
        earlier versions. The most recent changes are described in the
        following table.</para>
      <?rax revhistory?>
    </section>
    <section xml:id="Additional_Resources-d1e532">
      <title>Additional Resources</title>
      <!--
      <para>Descriptive information about Cloud Queues is also
        published in its Web Application Description Language (WADL).
        You are welcome to read this information here:
        <link xlink:href="http://docs.rackspace.com/cq/api/v1.0/cq-devgyude.wadl">http://docs.rackspace.com/cd/api/v1.0/cq-devguide.wadl
        </link></para>
        -->
      <para>You can download the most current versions of other
        API-related documents from <link
          xlink:href="http://docs.rackspace.com/"
          >http://docs.rackspace.com/</link>.</para>

      <para>For more details about Cloud Queues, refer to <link
          xlink:href="http://www.rackspace.com/cloud/queues/"
          >http://www.rackspace.com/cloud/queues/</link>. This site
        also offers links to Rackspace's official support channels,
        including phone, chat, and email as well as Knowledge Center
        articles.</para>
      <!--      
      <remark security="reviewer">Reviewer: do you have a
        corresponding link for the Cloud Queues landing page on
        rackspace.com/cloud? If so, can you please give it to
        me?</remark>
        -->
      <para>See the <citetitle>Cloud Queues Getting Started
          Guide</citetitle> for information about getting started
        using the API. All you need to get started with Cloud Queues
        is the getting started guide, the developer guide, and your
        Rackspace Cloud account.</para>
      <para>Email all support questions to
          <email>cloudqueues@rackspace.com</email>.</para>
      <para>Visit the <link
          xlink:href="http://feedback.rackspace.com/forums/71021-product-feedback/category/6841-cloud-sites"
          >Product Feedback Forum</link> and tell us what you think
        about Cloud Queues.</para>
      <para>You can follow Rackspace updates and announcements via
        Twitter at <link xlink:href="http://www.twitter.com/rackspace"
          >www.twitter.com/rackspace</link>.</para>
      <para>This API uses standard HTTP 1.1 response codes as
        documented at <link
          xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
          >www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</link>.</para>
    </section>
    <section xml:id="API-Contract_Changes-d1e001">
      <title>API Contract Changes</title>
      <para>Rackspace will notify customers in release notes when and
        if the contract changes.</para>
    </section>
    <section xml:id="Pricing_SLA-d1e1362">
      <title>Pricing and Service Level</title>
      <para>Cloud Queues is part of the Rackspace Cloud and your use
        of the Cloud Queues API will be billed according to the
        pricing schedule at <link
          xlink:href="http://www.rackspace.com/cloud/queues/"
          >http://www.rackspace.com/cloud/queues</link>.</para>
      <para>The Service Level Agreement (SLA) for Cloud Queues is
        available at <link
          xlink:href="http://www.rackspace.com/information/legal/cloud/sla#cloud_queues"
          >http://www.rackspace.com/information/legal/cloud/sla</link>.</para>
    </section>

  </chapter>
  <chapter xml:id="Concepts-dle001">
    <title>Concepts</title>
    <para>To use the Cloud Queues API effectively, you should
      understand the key concepts described in this section.</para>
    <section xml:id="how_cq_works">
      <title>How Cloud Queues Works</title>
      <para>Following is an overview of Cloud Queues works. For
        definitions of Cloud Queues terms, see the <xref
          linkend="glossary_1"/>.</para>
      <orderedlist>
        <listitem>
          <para>You create a queue to which producers or publishers
            post messages.</para>
        </listitem>
        <listitem>
          <para>Workers (consumers or subscribers) claim or get a
            message from the queue, complete the work in that message,
            and delete the message.</para>
          <para>If a worker will be offline before it completes the
            work in a message, the worker can retire the claim's time
            to live (TTL), putting the message back into the queue for
            another worker to claim.</para>
        </listitem>
        <listitem>
          <para>Subscribers monitor the claims from these queues to
            track activity and help troubleshoot errors.</para>
        </listitem>
      </orderedlist>
      <para>For the majority of use cases, Cloud Queues is not
        responsible for the ordering of messages. However, if there is
        only a single producer, Cloud Queues ensures that messages are
        handled in a First In, First Out (FIFO) order.</para>
    </section>
    <section xml:id="operating_modes">
      <title>Messaging Patterns</title>
      <para>Cloud Queues supports a variety of messaging patterns
        including the following:</para>
      <itemizedlist>
        <listitem>
          <para>producer-consumer</para>
        </listitem>
        <listitem>
          <para>publish-subscribe</para>
        </listitem>
      </itemizedlist>
      <section xml:id="producer_consumer">
        <title>Producer-Consumer</title>
        <para>The producer-consumer pattern has the following
          characteristics:</para>
        <itemizedlist>
          <listitem>
            <para>A producer is programmed to send messages to a
              queue.</para>
          </listitem>
          <listitem>
            <para>Multiple workers (or consumers) are programmed to
              monitor a queue.</para>
          </listitem>
          <listitem>
            <para>Only one worker can claim a message so that no other
              worker can claim the message and duplicate the
              work.</para>
          </listitem>
          <listitem>
            <para>The worker must delete the message when work is
              done.</para>
          </listitem>
          <listitem>
            <para>TTL restores a message to an unclaimed state if the
              worker never finishes.</para>
          </listitem>
        </itemizedlist>
        <para>This pattern is ideal for dispatching jobs to multiple
          processors.</para>
      </section>
      <section xml:id="publish_subscribe">
        <title>Publish-Subscribe</title>
        <para>Characteristics of the Publish-Subscribe pattern
          are:</para>
        <itemizedlist>
          <listitem>
            <para>The publisher sends a message to a queue.</para>
          </listitem>
          <listitem>
            <para>All workers (or subscribers) listen to the messages
              in the queue.</para>
          </listitem>
          <listitem>
            <para>Workers do not claim a message.</para>
          </listitem>
          <listitem>
            <para>Multiple workers can take action on a
              message.</para>
          </listitem>
          <listitem>
            <para>Workers can send a marker or cursor to skip messages
              already seen.</para>
          </listitem>
          <listitem>
            <para>TTL eventually deletes messages.</para>
          </listitem>
        </itemizedlist>
        <para>This pattern is ideal for notification of events to
          multiple workers at once.</para>
      </section>
    </section>
    <section xml:id="Use-Cases-d1e001">
      <title>Use Cases</title>
      <para>Queuing systems are used to coordinate tasks within an
        application. Here are some examples:</para>
      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Backup</emphasis>: A backup
            application might use a queuing system to connect the
            actions that users do in the a control panel to the
            customer's backup agent on a server. When a customer wants
            to start a backup, they simply choose "start backup" on a
            panel. Doing so causes the producer to put a "startBackup"
            message into the queue. Every few minutes, the agent on
            the customers server (the worker) checks the queue to see
            if it has any new messages to act on. The agent claims the
            "startBackup" message and kicks off the backup on the
            customer's server.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Storage</emphasis>: Gathering
            statistics for a large, distributed storage system can be
            a long process. The storage system can use a queuing
            system to ensure that jobs complete, even if one initially
            fails. Since messages are not deleted until after the
            worker has completed the job, the storage system can make
            sure that no job goes undone. If the worker fails to
            complete the job, the message stays in the queue to be
            completed by another server. In this case, a worker claims
            a message to perform a statistics job, but the claim's TTL
            expired and the message is put back into the queue when
            the job took too long to complete (meaning that it most
            likely failed). By giving the claim a TTL, applications
            can protect themselves from workers going offline while
            processing a message. After a claim's TTL expires, the
            message is put back into the queue for another worker to
            claim.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Email</emphasis>: The team for
            an email application is constantly migrating customer
            email from old versions to newer ones, so they develop a
            tool to let customers do it themselves. The migrations
            take a long time, so they cannot be done with single API
            calls, or by a single server. When a user starts a
            migration job from their portal, the migration tool sends
            messages to the queue with details of how to run the
            migration. A set of migration engines, the consumers in
            this case, periodically check the queues for new migration
            tasks, claim the messages, perform the migration, and
            update a database with the migration details. This process
            allows a set of servers to work together to accomplish
            large migrations in a timely manner.</para>
        </listitem>
      </itemizedlist>
      <para>Following are some generic use cases for Cloud
        Queues:</para>
      <itemizedlist>
        <listitem>
          <para>Distribute tasks among multiple workers (transactional
            job queues)</para>
        </listitem>
        <listitem>
          <para>Forward events to data collectors (transactional event
            queues)</para>
        </listitem>
        <listitem>
          <para>Publish events to any number of subscribers
            (publish-subscribe)</para>
        </listitem>
        <listitem>
          <para>Send commands to one or more agents (point-to-point or
            publish-subscribe)</para>
        </listitem>
        <listitem>
          <para>Request an action or get information from a Remote
            Procedure Call (RPC) agent</para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>
  <chapter xml:id="Gen_API_Info-de01">
    <title>General API Information</title>
    <para>The Cloud Queues API is implemented using a RESTful web
      service interface. Cloud Queues shares a common token-based
      authentication system with other Rackspace Cloud products, which
      allows seamless access among products and services.</para>
    <note>
      <para>All requests to authenticate against and operate the
        service are performed using SSL over HTTP (HTTPS) on TCP port
        443.</para>
    </note>
    <section xml:id="Authentication-d1e647">
      <title>Authentication</title>
      <para>Each REST request to the Cloud Queues API requires the
        inclusion of a specific authorization token, which is supplied
        by the <code>X-Auth-Token</code> HTTP header. You obtain this
        token by using the Rackspace Cloud Authentication service
        (also known as the Cloud Identity Service) and supplying a
        valid username and API access key. (See the <parameter>token
          id</parameter> parameter in <xref linkend="authResponseXML"
        /> and <xref linkend="auth-response-example-json"/>).</para>
      <section xml:id="Geographic_Endpoints">
        <title>Geographic Endpoints</title>
        <para>The Rackspace Cloud Authentication service is the entry
          point to all Rackspace Cloud APIs and is itself a RESTful
          web service.</para>
        <para>You can use either of the following endpoints to access
          the Authentication service, regardless of US or UK
          identities:</para>
        <itemizedlist spacing="compact">
          <listitem>
            <para><link xlink:href="&ENDPOINT-US-20;"
                >&ENDPOINT-US-20;</link></para>
          </listitem>
          <listitem>
            <para><link xlink:href="&ENDPOINT-UK-20;"
                >&ENDPOINT-UK-20;</link></para>
          </listitem>
        </itemizedlist>
        <para>Your account might be based in either the US or the UK.
          The location of your account is not determined by your
          physical location but by the location of the Rackspace
          retail site that was used to create your account:</para>
        <itemizedlist spacing="compact">
          <listitem>
            <para>If your account was created through <link
                xlink:href="http://www.rackspacecloud.com"
                >http://www.rackspacecloud.com</link>, it is a
              US-based account.</para>
          </listitem>
          <listitem>
            <para>If your account was created through <link
                xlink:href="http://www.rackspace.co.uk"
                >http://www.rackspace.co.uk</link>, it is a UK-based
              account.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section xml:id="Retrieving_Auth_Token">
        <title>Retrieving the Authentication Token</title>
        <para>The authenticate operation provides you with an
          authentication token and a list of regional cloud endpoints.
          The sample requests and responses in this section illustrate
          a general case. In your authentication request, use your own
          credentials rather than the sample values shown for
            <code>username</code> and <code>apiKey</code>. When you
          authenticate successfully, the response to your
          authentication request includes a catalog of the services to
          which you have subscribed rather than the sample values
          shown in this section.</para>
        <table rules="all">
          <caption>Command to Retrieve Authentication Token</caption>
          <col width="32%"/>
          <col width="22%"/>
          <col width="46%"/>
          <tbody>
            <tr>
              <td>&POST;</td>
              <td> v2.0/tokens </td>
              <td>Authenticate to receive a token and a service
                catalog.</td>
            </tr>
          </tbody>
        </table>
        <simpara> Normal Response Code(s):
            <returnvalue>200</returnvalue>,
            <returnvalue>203</returnvalue>
        </simpara>
        <simpara> Error Response Code(s): unauthorized
            (<errorcode>401</errorcode>), userDisabled
            (<errorcode>403</errorcode>), badRequest
            (<errorcode>400</errorcode>), authFault
            (<errorcode>500</errorcode>), serviceUnavailable
            (<errorcode>503</errorcode>) </simpara>
        <example>
          <title>Auth Request for US Endpoint: XML</title>
          <programlisting language="bash"><xi:include href="samples/credentials-20-xml-http.txt" parse="text"/></programlisting>
          <programlistingco>
            <areaspec>
              <area xml:id="credentials.xml.user" units="linecolumn"
                coords="13 17"/>
              <area xml:id="credentials.xml.key" units="linecolumn"
                coords="14 15"/>
            </areaspec>
            <programlisting language="xml"><xi:include href="samples/credentials-20.xml" parse="text"/></programlisting>
          </programlistingco>
        </example>
        <example>
          <title>Auth Request for US Endpoint: JSON</title>
          <programlisting language="bash"><xi:include href="samples/credentials-20-json-http.txt" parse="text"/></programlisting>
          <programlistingco>
            <areaspec>
              <area xml:id="credentials.json.user" units="linecolumn"
                coords="14 22"/>
              <area xml:id="credentials.json.key" units="linecolumn"
                coords="15 20"/>
            </areaspec>
            <programlisting language="json"><xi:include href="samples/credentials-20.json" parse="text"/></programlisting>
          </programlistingco>
        </example>
        <calloutlist>
          <callout arearefs="credentials.xml.user">
            <para>The username supplied here is your common Rackspace
              Cloud username.</para>
          </callout>
          <callout arearefs="credentials.xml.key">
            <para>The key is your API access key.</para>
            <para><emphasis role="bold">To find your API
                Key:</emphasis>
            </para>
            <orderedlist>
              <listitem>
                <para>Log in to the Cloud Control Panel (<link
                    xlink:href="https://mycloud.rackspace.com"
                    >https://mycloud.rackspace.com</link>).</para>
              </listitem>
              <listitem>
                <para>On the upper-right side of the top navigation
                  pane, click your username.</para>
              </listitem>
              <listitem>
                <para>From the menu, select <guilabel>Account
                    Settings</guilabel>.</para>
              </listitem>
              <listitem>
                <para>In the Login Details section of the Account
                  Settings page, locate the <guilabel>API
                    Key</guilabel> field and click
                    <guibutton>Show</guibutton>.</para>
              </listitem>
              <listitem>
                <para>Copy the value of the API Key and paste it into
                  a text editor of your choice.</para>
              </listitem>
              <listitem>
                <para>Click <guibutton>Hide</guibutton> to hide the
                  value of the API Key.</para>
              </listitem>
            </orderedlist>
            <para>You also need your cloud account number. In the
              documentation, the account number is often referred to
              as your tenant name or tenant ID (technically, the ID is
              different from the name, but at Rackspace, they are the
              same thing). Together, three components—your username,
              your API Key, and your tenant ID or cloud account
              number—form the authentication credentials that are
              required to connect to the Rackspace cloud.</para>
            <para>To find your tenant ID or cloud account number,
              locate your username on the upper-right side of the top
              navigation pane in the Cloud Control Panel. The tenant
              ID or account number is in parentheses just to the right
              of your username.</para>
          </callout>
        </calloutlist>
        <example xml:id="authResponseXML">
          <title>Auth Response for US Endpoint: XML</title>
          <programlisting language="bash"><xi:include href="../../src/resources/samples/auth-20-xml-http.txt" parse="text"/></programlisting>
          <programlistingco>
            <areaspec>
              <area xml:id="response.xml.namespaces"
                units="linecolumn" coords="7 9"/>
              <area xml:id="response.xml.token" units="linecolumn"
                coords="15 10"/>
              <area xml:id="response.xml.dfltregion"
                units="linecolumn" coords="16 67"/>
              <area xml:id="response.xml.role" units="linecolumn"
                coords="17 12"/>
              <area xml:id="response.xml.catalog" units="linecolumn"
                coords="22 21"/>
              <area xml:id="response.xml.servicetype"
                units="linecolumn" coords="51 34"/>
              <area xml:id="response.xml.servicename"
                units="linecolumn" coords="51 54"/>
              <area xml:id="response.xml.region" units="linecolumn"
                coords="52 30"/>
              <area xml:id="response.xml.tenant" units="linecolumn"
                coords="53 66"/>
              <area xml:id="response.xml.url" units="linecolumn"
                coords="54 9"/>
            </areaspec>
            <programlisting language="xml"><xi:include href="../../src/resources/samples/auth-20.xml" parse="text"/></programlisting>
          </programlistingco>
        </example>
        <example xml:id="auth-response-example-json">
          <title>Auth Response for US Endpoint: JSON</title>
          <programlistingco>
            <areaspec>
              <area xml:id="response.json.namespaces"
                units="linecolumn" coords="200 1"/>
              <area xml:id="response.json.token" units="linecolumn"
                coords="9 8"/>
              <area xml:id="response.json.dfltregion"
                units="linecolumn" coords="16 45"/>
              <area xml:id="response.json.role" units="linecolumn"
                coords="17 12"/>
              <area xml:id="response.json.catalog" units="linecolumn"
                coords="30 8"/>
              <area xml:id="response.json.servicetype"
                units="linecolumn" coords="114 16"/>
              <area xml:id="response.json.servicename"
                units="linecolumn" coords="113 16"/>
              <area xml:id="response.json.region" units="linecolumn"
                coords="104 24"/>
              <area xml:id="response.json.tenant" units="linecolumn"
                coords="101 24"/>
              <area xml:id="response.json.url" units="linecolumn"
                coords="102 24"/>
            </areaspec>
            <programlisting language="json"><xi:include href="../../src/resources/samples/auth-20.json" parse="text"/>
                    </programlisting>
          </programlistingco>
        </example>
        <note>
          <para>The information shown in the Auth response examples is
            for US-based accounts. If you authenticate against the UK
            endpoint, the response that you receive shows the service
            catalog information for UK-based accounts.</para>
        </note>
        <calloutlist>
          <callout arearefs="response.xml.namespaces">
            <para> In XML responses only, a list of namespaces
              identifies API extensions that add functionality to the
              core API.</para>
          </callout>
          <callout arearefs="response.xml.token">
            <para>Present this token in the X-Auth-Token HTTP header
              of your request. Tokens are valid for a finite duration;
              a token's default lifespan is 24 hours.</para>
            <para>The token's <code>expires</code> attribute denotes
              the time after which the token automatically becomes
              invalid. A token can be manually revoked before the time
              identified by the <code>expires</code> attribute. The
              attribute predicts a token's maximum possible lifespan
              but does not guarantee that it will reach that lifespan.
              You are encouraged to cache a token until it
              expires.</para>
            <note>
              <para>The token's expiration time is formatted
                differently in the US and UK. These response examples
                show the US format. For examples of the UK format, see
                  <link
                  xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/POST_authenticate_v2.0_tokens_.html"
                  >http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/POST_authenticate_v2.0_tokens_.html</link>.</para>
            </note>
            <para/>
          </callout>
          <callout arearefs="response.xml.dfltregion">
            <para>Users can be assigned a default region. If multiple
              endpoints are associated with a service in the user's
              catalog, the endpoint for the user's default region is
              selected if it is available. In this example, the user's
              default region is DFW. Several of the services in the
              user's catalog are associated with endpoints in that
              region and in the ORD region. Whenever possible, the
              user's work is directed to the DFW region.</para>
            <para/>
          </callout>
          <callout arearefs="response.xml.role">
            <para>Users can be assigned multiple roles, with each role
              providing specific privileges. In this example,
                <code>jsmith</code> is the administrative user for the
              account and holds the fully privileged
                <code>identity:admin</code> role. Other users might
              hold other roles with different privileges. Roles do not
              have to be associated with actual job functions such as
              Administrator, Operator, Developer, Tester, or
              Trainer.</para>
            <para/>
          </callout>
          <callout arearefs="response.xml.catalog">
            <para>The service catalog lists the services that this
              user can access. In this example, the user can access
              the following services: one database service, one
              load-balancing service, two compute services (Cloud
              Servers OpenStack and Cloud Servers), two object storage
              services (Cloud Files Content Distribution Network
              (CDN), and Cloud Files), and one DNS service. The
              catalog entry for each service provides at least one
              endpoint URL for that service. Other information, such
              as regions, versions, and tenants, is provided if it's
              relevant to a user's access to a service.</para>
            <para/>
          </callout>
          <callout arearefs="response.xml.servicetype">
            <para>The service <code>type</code> attribute identifies
              services that perform similar functions, regardless of
              the service names. In this example, the services named
              cloudServers and cloudServersOpenStack are both
              identified as <code>type="compute"</code>, identifying
              them as compute services even though the word compute
              does not appear in their names.</para>
            <important>
              <para>Use service type as the primary value for locating
                a service. If multiple endpoints of the same service
                type exist in the same region, use service name to
                locate the appropriate service.</para>
            </important>
            <para/>
          </callout>
          <callout arearefs="response.xml.servicename">
            <para>The service <code>name</code> attribute identifies
              each unique service in the catalog. After a service is
              created, its name does not change. However, new services
              of the same service type might be added to the catalog
              with new names.</para>
            <important>
              <para>If you are programmatically parsing an
                authentication response, use service type rather than
                service name to determine whether a user has access to
                a particular kind of service. Service type is stable
                across all releases. New service types might be
                developed, but existing service types are not renamed.
                In this example, <code>type="compute"</code>
                identifies all the available compute services. If new
                compute services are added in future releases, you can
                recognize them by parsing for
                  <code>type="compute"</code> in the authentication
                response's service catalog.</para>
            </important>
            <para/>
          </callout>
          <callout arearefs="response.xml.region">
            <para>A service might expose endpoints in different
              regions. Regional endpoints enable clients to provision
              resources in a manner that provides high
              availability.</para>
            <para>Some services are not region specific. These
              services supply a single, non-regional endpoint and do
              not provide access to internal URLs.</para>
            <para/>
          </callout>
          <callout arearefs="response.xml.tenant">
            <para>Some services recognize the specification of a
              tenant. If a service recognizes tenants, the format of
              the tenant specification is defined only by the service.
              For details about whether and how to specify a tenant,
              check the documentation for the service that you are
              using.</para>
            <para/>
          </callout>
          <callout arearefs="response.xml.url">
            <para>An endpoint can be assigned public and internal
              URLs. A public URL is accessible from anywhere. Access
              to a public URL usually incurs traffic charges. Internal
              URLs are accessible only to services within the same
              region. Access to an internal URL is free of
              charge.</para>
            <para/>
          </callout>
        </calloutlist>
        <para>Authentication tokens are typically valid for 24 hours.
          Applications should be designed to re-authenticate after
          receiving a 401 (Unauthorized) response from a service
          endpoint.</para>
        <important>
          <para>If you are programmatically parsing an authentication
            response, be aware that service names are stable for the
            life of the particular service and can be used as keys.
            Also be aware that a user's service catalog can include
            many uniquely-named services that perform similar
            functions. For example, cloudServersOpenStack is the
            OpenStack version of compute, whereas cloudServers is the
            earlier version of compute. The same user can have access
            to both services. In version 2.0 of the Authentication
            service, the service type attribute can be used as a key
            by which to recognize similar services. See the following
            tip.</para>
        </important>
        <tip>
          <para>Beginning with version 2.0 of the Authentication
            service, the service catalog includes a service type
            attribute to identify services that perform similar
            functions but have different names. For example,
              <code>type="compute"</code> identifies compute services
            such as cloudServers and cloudServersOpenStack. Some
            developers have found the service type attribute to be
            useful in parsing the service catalog. For additional
            information about Authentication 2.0, see the
              <citetitle>Cloud Identity Client Developer
              Guide</citetitle> at <link
              xlink:href="http://docs.rackspace.com"
              >http://docs.rackspace.com/</link>.</para>
        </tip>
        <para>Cloud Queues service endpoints are published in the
          service catalog in the authentication response with the
          account number, which is a required element of the service
          endpoints. The examples in this document show authentication
          for US customers. Customers with UK-based accounts see
          different values in the service catalog. See the next
          section for more information about service endpoints.</para>
      </section>
    </section>
    <section xml:id="RBAC"
      xmlns:wadl="http://wadl.dev.java.net/2009/02">
      <title>Role Based Access Control</title>
      <para>Role Based Access Control (RBAC) restricts access to the
        capabilities of Rackspace Cloud services, including the Cloud
        Queues API, to authorized users only. RBAC enables Rackspace
        Cloud customers to specify which account users of their Cloud
        account have access to which Cloud Queues API service
        capabilities, based on roles defined by Rackspace (see <xref
          linkend="RBAC_product_roles_table"/>). The permissions to
        perform certain operations in Cloud Queues API – create, read,
        update, delete – are assigned to specific roles, and these
        roles can be assigned by the Cloud account admin user to
        account users of the account.</para>
      <section xml:id="Assigning-Roles-d1e001">
        <title>Assigning Roles to Account Users</title>
        <para>The account owner (identity:user-admin) can create
          account users on the account and then assign roles to those
          users. The roles grant the account users specific
          permissions for accessing the capabilities of the Cloud
          Queues service. Each account has only one account owner, and
          that role is assigned by default to any Rackspace Cloud
          account when the account is created.</para>
        <para>See the <citetitle>Cloud Identity Client Developer
            Guide</citetitle> for information about how to perform the
          following tasks:</para>
        <itemizedlist>
          <listitem>
            <para><link
                xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/POST_addUser_v2.0_users_User_Calls.html"
                > Create account users</link></para>
          </listitem>
          <listitem>
            <para><link
                xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/PUT_addUserRole_v2.0_users__userId__roles_OS-KSADM__roleId__Role_Calls.html"
                > Assign roles to account users</link></para>
          </listitem>
          <listitem>
            <para><link
                xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/DELETE_deleteUserRole_v2.0_users__userId__roles_OS-KSADM__roleId__Role_Calls.html"
                > Delete roles from account users</link></para>
          </listitem>
        </itemizedlist>
        <note>
          <para>The account admin user (identity:user-admin) role
            cannot hold any additional roles because it already has
            full access to all capabilities by default.</para>
        </note>
      </section>
      <section xml:id="RBAC_product_roles">
        <title>Roles Available for Cloud Queues </title>
        <para>Three roles (admin, creator, and observer) can be used
          to access the Cloud Queues API specifically. The following
          table describes these roles and their permissions.</para>
        <table xml:id="RBAC_product_roles_table" rules="all">
          <caption>Cloud Queues Product Roles and
            Capabilities</caption>
          <col width="50%"/>
          <col width="50%"/>
          <thead>
            <tr>
              <th>Role Name</th>
              <th>Role Permissions</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>queues:admin</td>
              <td>This role provides Create, Read, Update, and Delete
                permissions in Cloud Queues, where access is
                granted.</td>
            </tr>
            <tr>
              <td>queues:creator</td>
              <td>This role provides Create, Read and Update
                permissions in Cloud Queues, where access is
                granted.</td>
            </tr>
            <tr>
              <td>queues:observer</td>
              <td>This role provides Read permission in Cloud Queues,
                where access is granted.</td>
            </tr>
          </tbody>
        </table>
        <para>Additionally, two multiproduct roles apply to all
          products. Users with multiproduct roles inherit access to
          future products when those products become RBAC-enabled. The
          following table describes these roles and their
          permissions.</para>
        <table rules="all">
          <caption> Multiproduct (Global) Roles and
            Permissions</caption>
          <col width="50%"/>
          <col width="50%"/>
          <thead>
            <tr>
              <th>Role Name</th>
              <th>Role Permissions</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>admin</td>
              <td>This role provides Create, Read, Update, and Delete
                permissions in all products, where access is
                granted.</td>
            </tr>
            <tr>
              <td>observer</td>
              <td>This role provides Read permission in all products,
                where access is granted.</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section xml:id="RBAC-Resolving-Conflicts-d1e001" version="5.0">
        <title>Resolving Conflicts Between RBAC Multiproduct vs.
          Custom (Product-specific) Roles</title>
        <para>The account owner can set roles for both multiproduct
          and Cloud Queues scope, and it is important to understand
          how any potential conflicts among these roles are resolved.
          When two roles appear to conflict, the role that provides
          the more extensive permissions takes precedence. Therefore,
          admin roles take precedence over observer and creator roles,
          because admin roles provide more permissions.</para>
        <para>The following table shows two examples of how potential
          conflicts between user roles in the Control Panel are
          resolved:</para>
        <para>
          <informaltable rules="all">
            <thead>
              <tr align="center">
                <td>Permission Configuration</td>
                <td>View of Permission in the Control Panel </td>
                <td>Can the User Perform Product Admin Functions in
                  the Control Panel?</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>User is assigned the following roles: multiproduct
                    <emphasis role="bold">observer</emphasis> and
                  Cloud Queues <emphasis role="bold"
                  >admin</emphasis></td>
                <td>Appears that the user has only the multiproduct
                    <emphasis role="bold">observer</emphasis>
                  role</td>
                <td>Yes, for Cloud Queues only. The user has the
                    <emphasis role="bold">observer</emphasis> role for
                  the rest of the products.</td>
              </tr>
              <tr>
                <td>User is assigned the following roles: multiproduct
                    <emphasis role="bold">admin</emphasis> and Cloud
                  Queues <emphasis role="bold"
                  >observer</emphasis></td>
                <td>Appears that the user has only the multiproduct
                    <emphasis role="bold">admin</emphasis> role</td>
                <td>Yes, for all of the products. The Cloud Queues
                    <emphasis role="bold">observer</emphasis> role is
                  ignored.</td>
              </tr>
            </tbody>
          </informaltable>
        </para>
      </section>
      <section xml:id="RBAC-Permissions-Cross-Ref-d1e001"
        version="5.0">
        <title>RBAC Permissions Cross-reference to Cloud Queues API
          Operations</title>
        <para>API operations for Cloud Queues may or may not be
          available to all roles. To see which operations are
          permitted to invoke which calls, please review <link
            xlink:href="http://www.rackspace.com/knowledge_center/article/permissions-matrix-for-role-based-access-control-rbac"
            >the Knowledge Center article</link>.</para>
      </section>
    </section>
    <section xml:id="serviceEndpoints">
      <title>Service Access Endpoints</title>
      <para>The following table shows the available service endpoints
        for Cloud Queues.</para>
      <para>
        <table xml:id="Endpoints-Table-d1e001" rules="all">
          <caption>Regionalized Service Endpoints</caption>
          <thead>
            <tr align="center">
              <td colspan="2">Region</td>
              <td colspan="5">Endpoint</td>
            </tr>
          </thead>
          <tbody>
            <tr align="left">
              <td colspan="2" rowspan="2">Chicago (ORD)</td>
              <td colspan="5"
                  ><code>https://ord.queues.api.rackspacecloud.com/v1/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                  ><code>https://snet-ord.queues.api.rackspacecloud.com/v1/</code></td>
            </tr>
            <tr>
              <td colspan="2" rowspan="2">Dallas/Ft. Worth (DFW)</td>
              <td colspan="5"
                  ><code>https://dfw.queues.api.rackspacecloud.com/v1/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                  ><code>https://snet-dfw.queues.api.rackspacecloud.com/v1/</code></td>
            </tr>
            <tr>
              <td colspan="2" rowspan="2">Hong Kong (HKG)</td>
              <td colspan="5"
                  ><code>https://hkg.queues.api.rackspacecloud.com/v1/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                  ><code>https://snet-hkg.queues.api.rackspacecloud.com/v1/</code></td>
            </tr>
            <tr align="left">
              <td colspan="2" rowspan="2">London (LON)</td>
              <td colspan="5"
                  ><code>https://lon.queues.api.rackspacecloud.com/v1/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                  ><code>https://snet-lon.queues.api.rackspacecloud.com/v1/</code></td>
            </tr>
            <tr>
              <td colspan="2" rowspan="2">Northern Virginia (IAD)</td>
              <td colspan="5"
                  ><code>https://iad.queues.api.rackspacecloud.com/v1/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                  ><code>https://snet-iad.queues.api.rackspacecloud.com/v1/</code></td>
            </tr>
            <tr>
              <td colspan="2" rowspan="2">Sydney (SYD)</td>
              <td colspan="5"
                  ><code>https://syd.queues.api.rackspacecloud.com/v1/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                  ><code>https://snet-syd.queues.api.rackspacecloud.com/v1/</code></td>
            </tr>
          </tbody>
        </table>
      </para>
      <para>If you are working with cloud servers that are in one of
        the Rackspace data centers, using the ServiceNet endpoint in
        the same data center has no network costs and provides a
        faster connection. ServiceNet endpoints are prefixed with
          <code>snet-</code> in <xref linkend="Endpoints-Table-d1e001"
        />. ServiceNet is the data center internet network. In your
        authentication response (see <xref
          linkend="Authentication-d1e647"/>), it is listed as
          <code>InternalURL</code>.</para>
      <para>If you are working with servers that are not in one of the
        Rackspace data centers, you must use a public endpoint to
        connect. In your authentication response, public endpoints are
        listed as <code>publicURL</code>. If you are working with
        servers in multiple data centers or have a mixed environment
        where you have servers in your data centers and in Rackspace
        data centers, use a public endpoint because it is accessible
        from all the servers in the different environments.</para>
      <note>
        <para>You should copy the base URLs directly from the catalog
          rather than trying to construct them manually.</para>
        <para>Rackspace Cloud Identity returns an endpoint with your
          account ID. Note the following information about account
          ID:</para>
        <itemizedlist>
          <listitem>
            <para>Account ID from Cloud Identity is the same as the
              Project ID given by the <code>X-Project-Id</code> header
              in Cloud Queues. (You might also see account ID or
              project ID referred to as tenant ID.)</para>
          </listitem>
          <listitem>
            <para>You do not have to provide the account ID for the
              Cloud Queues API if you have the
                <code>X-Project-Id</code> header set. (In this case,
              the Cloud Queues API works with or without the account
              ID specified.)</para>
          </listitem>
          <listitem>
            <para>Without the <code>X-Project-Id</code> header, you
              receive an auth error if the account ID is not in the
              URL.</para>
          </listitem>
          <listitem>
            <para>If the account ID is in the URL, the Cloud Queues
              API will use that ID in place of the
                <code>X-Project-Id</code> header.</para>
          </listitem>
          <listitem>
            <para>Account ID and Project ID refer to your Rackspace
              account number.</para>
          </listitem>
        </itemizedlist>
      </note>
      <tip>
        <para>If you do not know which data center you are working in
          or your account ID, you can find them in your Cloud Control
          Panel at <link xlink:href="https://mycloud.rackspace.com/"
            >mycloud.rackspace.com</link>.</para>
      </tip>
      <!--<
      <para>Replace the sample account ID number,
          <parameter>1234</parameter>, with your actual account number
        returned as part of the authentication service
        response.</para>
      <para>You will find the actual account number after the final
        '/' in the <code>publicURL</code> field returned by the
        authentication response. For example, in <xref
          linkend="auth-response-example-json"/> you can see from the
          <code>publicURL</code> field for <code>cloudServers</code>
          ("https://servers.api.rackspacecloud.com/v1.0/<emphasis
          role="bold">1100111</emphasis>") that the account number is
        1100111.</para>
      <note>
        <para>Account ID refers to your Rackspace account number,
          which you can also find in your Cloud Control Panel at <link
            xlink:href="https://mycloud.rackspace.com/"
            >mycloud.rackspace.com</link>.</para>
      </note>
      -->
    </section>
    <section xml:id="contractVersion">
      <title>Contract Version</title>
      <para>The Cloud Queues version defines the contract and build
        information for the API.</para>
      <para>The contract version denotes the data model and behavior
        that the API supports. The requested contract version is
        included in all request URLs. Different contract versions of
        the API might be available at any given time and are not
        guaranteed to be compatible with one another.</para>
      <example>
        <title>Sample Request URL for Contract Version 1 </title>
        <programlisting>https://ord.queues.api.rackspacecloud.com/<emphasis role="strong">v1</emphasis></programlisting>
      </example>
      <note>
        <para>This document pertains to contract version 1. Rackspace
          will notify customers in Release Notes when and if the
          contract does change.</para>
      </note>
    </section>
    <section xml:id="Request_Response_Types-d1e903">
      <title>Request and Response Types</title>
      <para>The Cloud Queues API supports JSON data serialization
        formats. You specify the request format by using the
          <code>Content-Type</code> header. The request format is
          <emphasis role="italic">required</emphasis> for calls that
        have a request body. You can specify the response format in
        requests either by using the Accept header or by adding a
          <code>.json</code> extension to the request URI. JSON is
        also used for the response format.</para>
      <table rules="all">
        <caption>Response Format</caption>
        <?dbfo keep-together="always"?>
        <thead>
          <tr align="center">
            <td>Format</td>
            <td>Accept Header</td>
            <td>Query Extension</td>
            <td>Default</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>JSON</td>
            <td>application/json</td>
            <td>.json</td>
            <td>Yes</td>
          </tr>
        </tbody>
      </table>
    </section>
    <?hard-pagebreak?>
    <section xml:id="Limits-d1e1397">
      <title>Limits</title>
      <para>Accounts are configured with default thresholds, or
        limits, that manage capacity and prevent abuse of the
        system.</para>
      <para>The system recognizes the following types of
        limits:</para>
      <itemizedlist>
        <listitem>
          <para>rate limits</para>
          <para>Rate limits are thresholds that are reset after a
            certain amount of time passes. Rate limits control the
            frequency at which the user can issue specific API
            requests. For more information, see <xref
              linkend="Rate-Limits-d1e003"/>.</para>
        </listitem>
        <listitem>
          <para>absolute limits</para>
          <para>Absolute limits are fixed. Absolute limits control the
            total number of specific objects that the user can possess
            simultaneously. For more information, see <xref
              linkend="Absolute-Limits-d1e003"/>.</para>
        </listitem>
      </itemizedlist>
      <note>
        <para>If the default limits are too low for your particular
          application, please contact Rackspace Cloud support to
          request an increase. All requests require reasonable
          justification.</para>
      </note>
      <section xml:id="Rate-Limits-d1e003">
        <title>Rate Limits</title>
        <para>Rate limits control the frequency at which the user can
          issue specific API requests.</para>
        <para>For Cloud Queues, the rate limit is 300 requests per
          second per project ID.</para>
        <para>If your application slightly exceeds the rate limit, the
          Cloud Queues service throttles your requests. The requests
          will take longer to perform and will have more latency. If
          your application greatly exceeds the 300 request per second
          rate limit, the API returns the HTTP response code 429 Too
          Many Requests. If this occurs, reduce the application's
          request rate to the Cloud Queues API by pausing slightly
          between each request. If your application continues to hit
          this limit and you cannot slow down the request rate, please
          contact Rackspace Cloud support.</para>
      </section>
      <section xml:id="Absolute-Limits-d1e003">
        <title>Absolute Limits</title>
        <para>The following table provides details about the absolute
          limits for the Cloud Queues API.</para>

        <table rules="all">
          <caption>Absolute Limits</caption>
          <col width="30%"/>
          <col width="40%"/>
          <col width="30%"/>
          <thead>
            <tr>
              <th>Type</th>
              <th>Description</th>
              <th>Limit</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="6">Limits on Messages and Queues per
                Request </td>
              <td>Number of queue records per page of results when
                listing queues</td>
              <td>1 - 1000</td>
            </tr>
            <tr>
              <td>Number of messages per page of results when listing
                messages</td>
              <td>1 - 25 </td>
            </tr>
            <tr>
              <td>Number of messages that can be posted in a single
                request </td>
              <td>1 - 25 </td>
            </tr>
            <tr>
              <td>Number of messages that can be claimed at one
                time</td>
              <td>1 - 25 </td>
            </tr>
            <tr>
              <td>Number of messages that can be deleted in a single
                bulk delete request</td>
              <td>1 - 25 </td>
            </tr>
            <tr>
              <td>Number of messages that can be requested in a bulk
                get by ID</td>
              <td>1 - 25 </td>
            </tr>
            <tr>
              <td rowspan="3">Time Limits</td>
              <td>Valid range for a message TTL</td>
              <td>60 - 1209600 seconds (1 minute to 14 days)</td>
            </tr>
            <tr>
              <td>Valid range for a claim TTL</td>
              <td>60 - 43200 seconds (1 minute to 12 hours)</td>
            </tr>
            <tr>
              <td>Valid range for claim grace period</td>
              <td>60 - 43200 seconds (1 minute to 12 hours)</td>
            </tr>
            <tr>
              <td rowspan="2">Data Limits</td>
              <td>Queue metadata JSON</td>
              <td>Cannot exceed 262144 bytes, including whitespace
                (256 KB)</td>
            </tr>
            <tr>
              <td>Message body JSON</td>
              <td>Cannot exceed 262144 bytes, including whitespace
                (256 KB)</td>
            </tr>
          </tbody>
        </table>
        <note>
          <para>For the 256 KB data limit for the message body JSON,
            if multiple messages are included in the request, this
            limit also applies to the sum of the message bodies added
            together. For example, you may have one message body of
            256 KB, or up to 10 messages for which the sum of the
            message bodies is 256 KB. A 400 error is triggered if a
            single message body or the sum of multiple message bodies
            exceed 256 KB in a single request.</para>
        </note>
      </section>

    </section>
    <section xml:id="commonHeaders">
      <title>Common Headers</title>
      <para>Each request to the Cloud Queues API must include certain
        standard and extended HTTP headers. These headers provide
        host, agent, authentication, and other pertinent information
        to the server. The following table provides the common headers
        used by the API.</para>
      <table rules="all">
        <caption>Common Headers</caption>
        <col width="30%"/>
        <col width="70%"/>
        <thead>
          <tr>
            <th>Header</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Host</td>
            <td>Host name of the API</td>
          </tr>
          <tr>
            <td>Date</td>
            <td>Current date and time</td>
          </tr>
          <tr>
            <td>Accept</td>
            <td>Media type desired; initially, only
                <code>application/json</code> is supported. <emphasis
                role="bold">Note: The <code>Accept</code> header is
                required.</emphasis>
            </td>
          </tr>
          <tr>
            <td>Accept-Encoding</td>
            <td>Specifies that the agent accepts gzip-encoded response
              bodies</td>
          </tr>
          <tr>
            <td>Content-Type</td>
            <td><code>application/json</code>
            </td>
          </tr>
          <tr>
            <td>Content-Length</td>
            <td>For <command>POST</command> or <command>PUT</command>
              requests, the length in bytes of the message document
              being submitted</td>
          </tr>
          <tr>
            <td>X-Auth-Token</td>
            <td>Auth token</td>
          </tr>
          <tr>
            <td>X-Project-Id</td>
            <td>An ID for a project to which the value of X-Auth-Token
              grants access. Queues are created under this
              project.</td>
          </tr>
          <tr>
            <td>Client-ID</td>
            <td>A UUID for each client instance. The UUID must be
              submitted in its canonical form (for example,
              3381af92-2b9e-11e3-b191-71861300734c). The client
              generates the Client-ID once. Client-ID persists between
              restarts of the client so the client should reuse that
              same Client-ID. <emphasis role="bold">Note: All
                message-related operations require the use of
                  <code>Client-ID</code> in the headers to ensure that
                messages are not echoed back to the client that posted
                them, unless the client explicitly requests
                this.</emphasis></td>
          </tr>
        </tbody>
      </table>
    </section>
    <section xml:id="datetimeformat">
      <title>Date and Time Format</title>
      <para>For the display and consumption of date and time values,
        the Cloud Queues service uses a date format that complies with
        ISO 8601.</para>
      <example>
        <title>Service Date and Time Format</title>
        <programlisting>yyyy-MM-dd'T'HH:mm:ss.SSSZ</programlisting>
        <para>For example, May 19, 2013 at 8:07:08 A.M., GMT-5 would
          have the following format:</para>
        <programlisting>2013-05-19T08:07:08-05:00</programlisting>
      </example>
      <para>The following table describes the date and time format
        codes.</para>
      <table rules="all">
        <caption>Explanation of Date and Time Format Codes</caption>
        <thead>
          <tr>
            <td>Code</td>
            <td>Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>yyyy</td>
            <td>Four-digit year</td>
          </tr>
          <tr>
            <td>MM</td>
            <td>Two-digit month</td>
          </tr>
          <tr>
            <td>dd</td>
            <td>Two-digit day of at the month</td>
          </tr>
          <tr>
            <td>T</td>
            <td>Separator for date and time</td>
          </tr>
          <tr>
            <td>HH</td>
            <td>Two-digit hour of the day (00-23)</td>
          </tr>
          <tr>
            <td>mm</td>
            <td>Two-digit minutes of the hour</td>
          </tr>
          <tr>
            <td>ss</td>
            <td>Two-digit seconds of the minute</td>
          </tr>
          <tr>
            <td>SSS</td>
            <td>Three-digit milliseconds of the second</td>
          </tr>
          <tr>
            <td>Z</td>
            <td>RFC 822 time zone</td>
          </tr>
        </tbody>
      </table>

    </section>
    <section xml:id="faults-dle101">
      <title>Faults</title>
      <para>If any Cloud Queues request results in an error, the
        queuing service returns an appropriate 4<emphasis
          role="italic">xx</emphasis> or 5<emphasis role="italic"
          >xx</emphasis> HTTP status code, and the following
        information in the body:</para>
      <itemizedlist>
        <listitem>
          <para>Title</para>
        </listitem>
        <listitem>
          <para>Description</para>
        </listitem>
        <listitem>
          <para>Internal code</para>
        </listitem>
        <listitem>
          <para>Link to more information</para>
        </listitem>
      </itemizedlist>

      <para><?rax-fo keep-with-next?> An example of an error message
        follows.</para>

      <example>
        <title>Error Message Example</title>
        <programlisting language="bash">HTTP/1.1 400 Bad Request
Content-Type: application/json</programlisting>
        <programlisting language="json">{
   "title":"Unsupported limit",
   "description":"The given limit cannot be negative, and cannot be greater than 50.",
   "code":1092,
   "link":{
      "rel":"help",
      "href":"http://docs.example.com/messages#limit",
      "text":"API documentation for the limit parameter"
   }
}</programlisting>
      </example>
      <para>Error information for each operation is included and with
        the operation description in <xref
          linkend="API_Operations_dle001"/>.</para>
      <section xml:id="error_Codes_And_Explanations">
        <title>Response Codes and Explanations</title>
        <para>This section includes response codes and explanations
          for each of the Cloud Queues API operations. The operations
          are described in <xref linkend="API_Operations_dle001"
          />.</para>
        <section xml:id="create_Queue_Codes">
          <title>Create Queue</title>
          <para>The following table describes the response codes for
            the <command>Create Queue</command> operation.</para>
          <table rules="all">
            <caption>Descriptions of Create Queue Response
              Codes</caption>
            <thead>
              <tr>
                <td>HTTP Response Code</td>
                <td>Description</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>201</td>
                <td>Success (created)</td>
              </tr>
              <tr>
                <td>204</td>
                <td>Success (already exists)</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Queue has a long name (greater than 64 bytes)</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Request header has missing fields</td>
              </tr>
              <tr>
                <td>401</td>
                <td>Request header has invalid auth token</td>
              </tr>
              <tr>
                <td>429</td>
                <td>Too many requests</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section xml:id="list_Queues_Codes">
          <title>List Queues</title>
          <para>The following table describes the response codes for
            the <command>List Queues</command> operation.</para>
          <table rules="all">
            <caption>Descriptions of List Queues Response
              Codes</caption>
            <thead>
              <tr>
                <td>HTTP Response Code</td>
                <td>Description</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>200</td>
                <td>Success</td>
              </tr>
              <tr>
                <td>200</td>
                <td>URI has invalid parameter (something other than
                    <parameter>limit</parameter>,
                    <parameter>marker</parameter>, or
                    <parameter>metadata</parameter>)</td>
              </tr>
              <tr>
                <td>204</td>
                <td>Request with non-existing value for
                    <parameter>marker</parameter></td>
              </tr>
              <tr>
                <td>400</td>
                <td>Request with negative value for
                    <parameter>limit</parameter></td>
              </tr>
              <tr>
                <td>400</td>
                <td>Request with zero value for
                    <parameter>limit</parameter></td>
              </tr>
              <tr>
                <td>400</td>
                <td>Request with non-boolean value for
                    <parameter>metadata</parameter></td>
              </tr>
              <tr>
                <td>400</td>
                <td>Header has missing fields</td>
              </tr>
              <tr>
                <td>401</td>
                <td>Request header has invalid auth token</td>
              </tr>
              <tr>
                <td>404</td>
                <td>Request a non-existing queue</td>
              </tr>
              <tr>
                <td>406</td>
                <td>Header has Accept != "application/json"</td>
              </tr>
              <tr>
                <td>429</td>
                <td>Too many requests</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section xml:id="delete_Queue_Codes">
          <title>Delete Queue</title>
          <para>The following table describes the response codes for
            the <command>Delete Queue</command> operation.</para>
          <table rules="all">
            <caption>Descriptions of Delete Queue Response
              Codes</caption>
            <thead>
              <tr>
                <td>HTTP Response Code</td>
                <td>Description</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>200</td>
                <td>URI has invalid parameters</td>
              </tr>
              <tr>
                <td>204</td>
                <td>Success</td>
              </tr>
              <tr>
                <td>204</td>
                <td>Delete a non-existing queue</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Header has missing fields</td>
              </tr>
              <tr>
                <td>401</td>
                <td>Request header has invalid auth token</td>
              </tr>
              <tr>
                <td>406</td>
                <td>Header has Accept != "application/json"</td>
              </tr>
              <tr>
                <td>429</td>
                <td>Too many requests</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section xml:id="check_Queue_Exists_Codes">
          <title>Check Queue Existence</title>
          <para>The following table describes the response codes for
            the <command>Check Queue Existence</command>
            operation.</para>
          <table rules="all">
            <caption>Descriptions of Check Queue Existence Response
              Codes</caption>
            <thead>
              <tr>
                <td>HTTP Response Code</td>
                <td>Description</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>204</td>
                <td>Check a non-existing queue</td>
              </tr>
              <tr>
                <td>404</td>
                <td>Request a non-existing queue</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section xml:id="set_Queue_Metadata_Codes">
          <title>Set Queue Metadata</title>
          <para>The following table describes the response codes for
            the <command>Set Queue Metadata</command>
            operation.</para>
          <table rules="all">
            <caption>Descriptions of Set Queue Metadata Response
              Codes</caption>
            <thead>
              <tr>
                <td>HTTP Response Code</td>
                <td>Description</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>204</td>
                <td>Success</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Request body is empty</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Request body is greater than 64 KB</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Request body has malformed JSON</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Request with non-JSON body</td>
              </tr>
              <tr>
                <td>406</td>
                <td>Request header has Accept !=
                  "application/json"</td>
              </tr>
              <tr>
                <td>429</td>
                <td>Too many requests</td>
              </tr>
              <tr>
                <td/>
                <td>Request with UTF-16 char JSON body</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section xml:id="get_Queue_Metadata_Codes">
          <title>Get Queue Metadata</title>
          <para>The following table describes the response codes for
            the <command>Get Queue Metadata</command>
            operation.</para>
          <table rules="all">
            <caption>Descriptions of Get Queue Metadata Response
              Codes</caption>
            <thead>
              <tr>
                <td>HTTP Response Code</td>
                <td>Description</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>200</td>
                <td>Success</td>
              </tr>
              <tr>
                <td>200</td>
                <td>No metadata exists for the queue</td>
              </tr>
              <tr>
                <td>200</td>
                <td>URI has invalid parameters</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Header has missing fields</td>
              </tr>
              <tr>
                <td>401</td>
                <td>Request header has invalid auth token</td>
              </tr>
              <tr>
                <td>404</td>
                <td>Request metadata for a non-existing queue</td>
              </tr>
              <tr>
                <td>406</td>
                <td>Header has Accept != "application/json"</td>
              </tr>
              <tr>
                <td>429</td>
                <td>Too many requests</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section xml:id="get_Queue_Stats_Codes">
          <title>Get Queue Stats</title>
          <para>The following table describes the response codes for
            the <command>Get Queue Stats</command> operation.</para>
          <table rules="all">
            <caption>Descriptions of Get Queue Stats Response
              Codes</caption>
            <thead>
              <tr>
                <td>HTTP Response Code</td>
                <td>Description</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>200</td>
                <td>Success</td>
              </tr>
              <tr>
                <td>200</td>
                <td>URI has invalid parameters</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Header has missing fields</td>
              </tr>
              <tr>
                <td>401</td>
                <td>Request header has invalid auth token</td>
              </tr>
              <tr>
                <td>404</td>
                <td>Request stats for a non-existing queue</td>
              </tr>
              <tr>
                <td>406</td>
                <td>Header has Accept != "application/json"</td>
              </tr>
              <tr>
                <td>429</td>
                <td>Too many requests</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section xml:id="post_Message_Codes">
          <title>Post Message</title>
          <para>The following table describes the response codes for
            the <command>Post Message</command> operation.</para>
          <table rules="all">
            <caption>Descriptions of Post Message Response
              Codes</caption>
            <thead>
              <tr>
                <td>HTTP Response Code</td>
                <td>Description</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>200</td>
                <td>URI has invalid parameters </td>
              </tr>
              <tr>
                <td>201</td>
                <td>Success</td>
              </tr>
              <tr>
                <td>201</td>
                <td>Post multiple messages in a single request, few of
                  them succeed (with <parameter>"partial":
                    true</parameter>)</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Post greater than 100 messages with a single
                  request </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Post with request body greater than 4 KB </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Post with invalid JSON request body</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Post with non-JSON request body </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Post with non-JSON message </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Post with TTL less than 60 </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Post with TTL greater than 1209600 </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Post with non-integer value of TTL</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Post with negative value of TTL </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Post without TTL in request body</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Post without <parameter>"body"</parameter> in
                  request body</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Post with no request body</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Post with messages encapsulated in multiple
                  arrays</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Header has missing fields </td>
              </tr>
              <tr>
                <td>401</td>
                <td>Header has invalid auth token</td>
              </tr>
              <tr>
                <td>404</td>
                <td>Post message to a non-existing queue </td>
              </tr>
              <tr>
                <td>406</td>
                <td>Header has Accept != "application/json" </td>
              </tr>
              <tr>
                <td>429</td>
                <td>Too many requests</td>
              </tr>
              <tr>
                <td>503</td>
                <td>Post multiple messages in a single request and all
                  of them fail</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section xml:id="get_Messages_Codes">
          <title>Get Messages</title>
          <para>The following table describes the response codes for
            the <command>Get Messages</command> operation.</para>
          <table rules="all">
            <caption>Descriptions of Get Messages Response
              Codes</caption>
            <thead>
              <tr>
                <td>HTTP Response Code</td>
                <td>Description</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>200</td>
                <td>Success (query matched 1 or more messages)</td>
              </tr>
              <tr>
                <td>200</td>
                <td>Request message with invalid parameter (something
                  other than <parameter>marker</parameter>,
                    <parameter>limit</parameter>, or
                    <parameter>echo</parameter>) </td>
              </tr>
              <tr>
                <td>204</td>
                <td>Success (query has no match) </td>
              </tr>
              <tr>
                <td>204</td>
                <td>Request message with non-existing
                    <parameter>marker</parameter>
                </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Request message with limit greater than 100 </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Post with request body greater than 4 KB </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Request message with limit less than or equal to 0
                </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Request message with non-boolean value for
                    <parameter>echo</parameter>
                </td>
              </tr>
              <tr>
                <td>401</td>
                <td>Header has invalid auth token </td>
              </tr>
              <tr>
                <td>404</td>
                <td>Request message from a non-existing queue</td>
              </tr>
              <tr>
                <td>406</td>
                <td>Header has Accept != "application/json" </td>
              </tr>
              <tr>
                <td>429</td>
                <td>Too many requests</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section xml:id="get_Set_Of_Messages_Codes">
          <title>Get a Set of Messages by ID</title>
          <para>The following table describes the response codes for
            the <command>Get a Set of Messages by ID</command>
            operation.</para>
          <table rules="all">
            <caption>Descriptions of Get a Set of Messages by ID
              Response Codes</caption>
            <thead>
              <tr>
                <td>HTTP Response Code</td>
                <td>Description</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>200</td>
                <td>Success</td>
              </tr>
              <tr>
                <td>200</td>
                <td>URI has invalid parameters </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Request message with limit greater than 100 </td>
              </tr>
              <tr>
                <td>401</td>
                <td>Post with request body greater than 4 KB </td>
              </tr>
              <tr>
                <td>404</td>
                <td>Request message with limit less than or equal to 0
                </td>
              </tr>
              <tr>
                <td>404</td>
                <td>Request message with non-boolean value for
                    <parameter>echo</parameter>
                </td>
              </tr>
              <tr>
                <td>406</td>
                <td>Header has invalid auth token </td>
              </tr>
              <tr>
                <td>429</td>
                <td>Too many requests</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section xml:id="delete_Set_Of_Messages_Codes">
          <title>Delete a Set of Messages by ID</title>
          <para>The following table describes the response codes for
            the <command>Delete a Set of Messages by ID</command>
            operation.</para>
          <table rules="all">
            <caption>Descriptions of Delete a Set of Messages by ID
              Response Codes</caption>
            <thead>
              <tr>
                <td>HTTP Response Code</td>
                <td>Description</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>204</td>
                <td>Success </td>
              </tr>
              <tr>
                <td>204</td>
                <td>Delete message from a non-existing queue </td>
              </tr>
              <tr>
                <td>204</td>
                <td>Delete a non-existing message </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Header has missing fields </td>
              </tr>
              <tr>
                <td>401</td>
                <td>Header has invalid auth token</td>
              </tr>
              <tr>
                <td>403</td>
                <td>Delete with expired claim ID </td>
              </tr>
              <tr>
                <td>403</td>
                <td>Delete with non-existing claim ID </td>
              </tr>
              <tr>
                <td>403</td>
                <td>Delete claimed message without providing a claim
                  ID</td>
              </tr>
              <tr>
                <td>406</td>
                <td>Header has Accept != "application/json" </td>
              </tr>
              <tr>
                <td>429</td>
                <td>Too many requests</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section xml:id="Get_Specific_Message_Codes">
          <title>Get a Specific Message</title>
          <para>The following table describes the response codes for
            the <command>Get a Specific Message</command>
            operation.</para>
          <table rules="all">
            <caption>Descriptions of Get a Specific Message Response
              Codes</caption>
            <thead>
              <tr>
                <td>HTTP Response Code</td>
                <td>Description</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>200</td>
                <td>Success(query matched the message) </td>
              </tr>
              <tr>
                <td>200</td>
                <td>URI has invalid parameters </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Header has missing fields </td>
              </tr>
              <tr>
                <td>401</td>
                <td>Header has invalid auth token</td>
              </tr>
              <tr>
                <td>404</td>
                <td>Request message from a non-existing queue</td>
              </tr>
              <tr>
                <td>404</td>
                <td>Request a non-existing message </td>
              </tr>
              <tr>
                <td>404</td>
                <td>Request an expired message </td>
              </tr>
              <tr>
                <td>406</td>
                <td>Header has Accept != "application/json" </td>
              </tr>
              <tr>
                <td>429</td>
                <td>Too many requests</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section xml:id="delete_Message_Codes">
          <title>Delete Message</title>
          <para>The following table describes the response codes for
            the <command>Delete Message</command> operation.</para>
          <table rules="all">
            <caption>Descriptions of Delete Message Response
              Codes</caption>
            <thead>
              <tr>
                <td>HTTP Response Code</td>
                <td>Description</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>200</td>
                <td>URI has invalid parameters </td>
              </tr>
              <tr>
                <td>204</td>
                <td>Success </td>
              </tr>
              <tr>
                <td>204</td>
                <td>Delete message from a non-existing queue </td>
              </tr>
              <tr>
                <td>204</td>
                <td>Delete a non-existing message </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Header has missing fields </td>
              </tr>
              <tr>
                <td>401</td>
                <td>Header has invalid auth token</td>
              </tr>
              <tr>
                <td>403</td>
                <td>Delete with expired claim ID </td>
              </tr>
              <tr>
                <td>403</td>
                <td>Delete with non-existing claim ID </td>
              </tr>
              <tr>
                <td>403</td>
                <td>Delete claimed message without providing a claim
                  ID</td>
              </tr>
              <tr>
                <td>406</td>
                <td>Header has Accept != "application/json" </td>
              </tr>
              <tr>
                <td>429</td>
                <td>Too many requests</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section xml:id="claim_Messages_Codes">
          <title>Claim Messages</title>
          <para>The following table describes the response codes for
            the <command>Claim Messages</command> operation.</para>
          <table rules="all">
            <caption>Descriptions of Claim Messages Response
              Codes</caption>
            <thead>
              <tr>
                <td>HTTP Response Code</td>
                <td>Description</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>201</td>
                <td>Success</td>
              </tr>
              <tr>
                <td>204</td>
                <td>Success (empty queue with no messages to
                  claim)</td>
              </tr>
              <tr>
                <td>204</td>
                <td>Claim message from a non-existing queue </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Claim message with invalid value for
                    <parameter>limit</parameter> (non-integer, or less
                  than or equal to 0)</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Claim message with <parameter>limit</parameter>
                  greater than 100) </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Claim message with no request body </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Claim message with no TTL field </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Claim message with invalid TTL value (non-integer,
                  or less than or equal to 0) </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Claim message with invalid JSON </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Claim message with non-JSON request body </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Claim message with missing header fields </td>
              </tr>
              <tr>
                <td>401</td>
                <td>Claim message with invalid auth token </td>
              </tr>
              <tr>
                <td>404</td>
                <td>Item not found</td>
              </tr>
              <tr>
                <td>406</td>
                <td>Header has Accept != "application/json" </td>
              </tr>
              <tr>
                <td>429</td>
                <td>Too many requests </td>
              </tr>
            </tbody>
          </table>
        </section>
        <section xml:id="query_Claim_Codes">
          <title>Query Claim</title>
          <para>The following table describes the response codes for
            the <command>Query Claim</command> operation.</para>
          <table rules="all">
            <caption>Descriptions of Query Claim Response
              Codes</caption>
            <thead>
              <tr>
                <td>HTTP Response Code</td>
                <td>Description</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>200</td>
                <td>Success</td>
              </tr>
              <tr>
                <td>200</td>
                <td>Query claim with invalid URI parameters </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Query claim with missing header fields</td>
              </tr>
              <tr>
                <td>401</td>
                <td>Query claim with invalid auth token </td>
              </tr>
              <tr>
                <td>404</td>
                <td>Query expired claim </td>
              </tr>
              <tr>
                <td>404</td>
                <td>Query claim from a non-existing queue </td>
              </tr>
              <tr>
                <td>404</td>
                <td>Query claim with non-existing claim ID </td>
              </tr>
              <tr>
                <td>406</td>
                <td>Header has Accept != "application/json"</td>
              </tr>
              <tr>
                <td>429</td>
                <td>Too many requests</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section xml:id="update_Claim_Codes">
          <title>Update Claim</title>
          <para>The following table describes the response codes for
            the <command>Update Claim</command> operation.</para>
          <table rules="all">
            <caption>Descriptions of Update Claim Response
              Codes</caption>
            <thead>
              <tr>
                <td>HTTP Response Code</td>
                <td>Description</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>200</td>
                <td>Update claim with invalid URI parameters</td>
              </tr>
              <tr>
                <td>204</td>
                <td>Success</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Update claim with no request body </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Update claim with invalid JSON in request body
                </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Update claim with non-JSON request body </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Update claim with missing header fields </td>
              </tr>
              <tr>
                <td>401</td>
                <td>Update claim with invalid auth token </td>
              </tr>
              <tr>
                <td>404</td>
                <td>Update expired claim </td>
              </tr>
              <tr>
                <td>404</td>
                <td>Update claim on a non-existing queue </td>
              </tr>
              <tr>
                <td>404</td>
                <td>Update a non-existing claim </td>
              </tr>
              <tr>
                <td>406</td>
                <td>Update claim with content-type !=
                  application/json-patch</td>
              </tr>
              <tr>
                <td>429</td>
                <td>Too many requests</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section xml:id="release_Claim_Codes">
          <title>Release Claim</title>
          <para>The following table describes the response codes for
            the <command>Release Claim</command> operation.</para>
          <table rules="all">
            <caption>Descriptions of Release Claim Response
              Codes</caption>
            <thead>
              <tr>
                <td>HTTP Response Code</td>
                <td>Description</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>200</td>
                <td>Release claim with invalid URI parameters</td>
              </tr>
              <tr>
                <td>204</td>
                <td>Success </td>
              </tr>
              <tr>
                <td>204</td>
                <td>Release expired claim</td>
              </tr>
              <tr>
                <td>204</td>
                <td>Release a non-existing claim </td>
              </tr>
              <tr>
                <td>400</td>
                <td>Release claim with missing header fields</td>
              </tr>
              <tr>
                <td>401</td>
                <td>Release claim with invalid auth token</td>
              </tr>
              <tr>
                <td>404</td>
                <td>Release claim from a non-existing queue</td>
              </tr>
              <tr>
                <td>406</td>
                <td>Header has Accept != "application/json"</td>
              </tr>
              <tr>
                <td>429</td>
                <td>Too many requests</td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
  </chapter>
  <chapter xml:id="API_Operations_dle001"
    xmlns="http://docbook.org/ns/docbook" role="api-reference">
    <title>API Operations</title>
    <para>This chapter describes each of the Cloud Queues operations,
      which are summarized in the following table.</para>
    <section xml:id="homeDocument-operation">
      <title>Home Document</title>
      <para>The section describes how to get the home document for
        Cloud Queues.</para>
      <note>
        <para>The home document schema is currently not ratified in
          OpenStack and may change.</para>
      </note>
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <wadl:resource href="../../src/wadl/cq-devguide.wadl#version">
          <wadl:method href="#getHomeDocument"/>
        </wadl:resource>
      </wadl:resources>
    </section>
    <section xml:id="queue-operations">
      <title>Queues </title>
      <para>This section describes queue operations that are supported
        by the Cloud Queues API.</para>
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <wadl:resource href="../../src/wadl/cq-devguide.wadl#queues">
          <wadl:method href="#listQueues"/>
        </wadl:resource>
        <wadl:resource
          href="../../src/wadl/cq-devguide.wadl#queue_name"/>
        <wadl:resource href="../../src/wadl/cq-devguide.wadl#metadata">
          <wadl:method href="#setQueueMetadata"/>
          <wadl:method href="#getQueueMetadata"/>
        </wadl:resource>
        <wadl:resource href="../../src/wadl/cq-devguide.wadl#stats">
          <wadl:method href="#getQueueStats"/>
        </wadl:resource>
      </wadl:resources>
    </section>
    <section xml:id="message-operations">
      <title>Messages </title>
      <para>This section describes message operations that are
        supported by the Cloud Queues API.</para>
      <note>
        <para>All message-related operations require that Client-ID be
          included in the headers. This is to ensure that messages are
          not echoed back to the client that posted them unless the
          client explicitly requests this. For more information, see
          Client-ID in <xref linkend="commonHeaders"/>.</para>
      </note>
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <wadl:resource href="../../src/wadl/cq-devguide.wadl#messages"/>
        <wadl:resource
          href="../../src/wadl/cq-devguide.wadl#messageId"/>
      </wadl:resources>
    </section>
    <section xml:id="claims-operations">
      <title>Claims </title>
      <para>This section describes claim operations that are supported
        by the Cloud Queues API.</para>
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <wadl:resource href="../../src/wadl/cq-devguide.wadl#claims">
          <wadl:method href="#claimMessages"/>
        </wadl:resource>
        <wadl:resource href="../../src/wadl/cq-devguide.wadl#claimId">
          <wadl:method href="#queryClaim"/>
          <wadl:method href="#updateClaim"/>
          <wadl:method href="#deleteClaim"/>
        </wadl:resource>
      </wadl:resources>
    </section>
  </chapter>
  <glossary xml:id="glossary_1">
    <title>Glossary</title>
    <glossentry xml:id="claim-d1e017">
      <glossterm>Claim</glossterm>
      <glossdef>
        <para>The process of a worker checking out a message to
          perform a task. Claiming a message prevents other workers
          from attempting to process the same messages.</para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Claim TTL</glossterm>
      <glossdef>
        <para>Defines how long a message will be in claimed state. A
          message can be claimed by one worker at a time.</para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Consumer</glossterm>
      <glossdef>
        <para>A server that claims messages from the queue.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="message-d1e016">
      <glossterm>Message</glossterm>
      <glossdef>
        <para>A task, a notification, or any meaningful data that a
          producer or publisher sends to the queue. A message exists
          until it is deleted by a recipient or automatically by the
          system based on a TTL (time-to-live) value.</para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Message TTL</glossterm>
      <glossdef>
        <para>Defines how long a message will be accessible.</para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Producer </glossterm>
      <glossdef>
        <para>A server or application that sends messages to the
          queue.</para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Producer - Consumer</glossterm>
      <glossdef>
        <para>A pattern where each worker application that reads the
          queue has to claim the message in order to prevent duplicate
          processing. Later, when work is done, the worker is
          responsible for deleting the message. If message is not
          deleted in a predefined time, it can be claimed by other
          workers.</para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Publisher</glossterm>
      <glossdef>
        <para>A server or application that posts messages to the queue
          with the intent to distribute information or updates to
          multiple subscribers.</para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Publisher - Subscriber</glossterm>
      <glossdef>
        <para>A pattern where all worker applications have access to
          all messages in the queue. Workers cannot delete or update
          messages.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="queue-d1e019">
      <glossterm>Queue</glossterm>
      <glossdef>
        <para>The entity that holds messages. Ideally, a queue is
          created per work type. For example, if you want to compress
          files, you would create a queue dedicated to this job. Any
          application that reads from this queue would only compress
          files.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="subscriber-d1e018">
      <glossterm>Subscriber</glossterm>
      <glossdef>
        <para>An observer that watches messages like an RSS feed but
          does not claim any messages.</para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>TTL</glossterm>
      <glossdef>
        <para>Time-to-live value.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="worker-d1e018">
      <glossterm>Worker</glossterm>
      <glossdef>
        <para>A client that claims messages from the queue and
          performs actions based on those messages.</para>
      </glossdef>
    </glossentry>
  </glossary>
</book>
